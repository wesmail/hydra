//*-- AUTHOR : Ilse Koenig
//*-- Modified : 12/06/2002 by Ilse Koenig

/////////////////////////////////////////////////////////////
// HOraConn
//
// Connection class to database Oracle 
// (uses the Oracle C/C++ precompiler)
//
/////////////////////////////////////////////////////////////
using namespace std;
#include "horaconn.h"
#include "hades.h"
#include "hruntimedb.h"
#include <stdio.h>
#include <iostream>
#include <iomanip>
#include <stddef.h>
#include <stdlib.h>
#include <string.h>
#include <termios.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/types.h>

// Oracle communication area
#include <oraca.h>
// SQL Communications Area
#include <sqlca.h>
 
ClassImp(HOraConn)

HOraConn::HOraConn() {
  // default constructor
  // defines default values for user ("hades_ana") and the database
  //   ("db-hades.oracle.gsi.de", the HADES Oracle 8 database on Linux at GSI)
  // User "hades" has Readonly access to the Oracle tables.
  // The connection to Oracle is not opened!
  strcpy(dbName,"db-hades.oracle.gsi.de");
  strcpy(userName,"hades_ana");
  isConnected=kFALSE;
  actRunId=-1;
  runStart=-1;
  expLocation[0]='\0';
  historyDate[0]='\0';
}


HOraConn::~HOraConn() {
  // default destructor (closes connection)
  close();
}


Bool_t HOraConn::open() {
  // opens default connection with readonly access
  char* password = new char[9];
  strcpy(password,"hades");
  Bool_t rc=openConnection(password);
  if (!rc) close();
  return rc;
}

Bool_t HOraConn::open(char *uName) {
  // opens connection to database Hades for user given by name
  // asks for password
  strncpy(userName,uName,20);
  char* password=getPassword();
  Bool_t rc=openConnection(password);
  if (!rc) close();
  return rc;
}


Bool_t HOraConn::open(char *dbN, char *uN) {
  // opens connection to database with name dbName for user given by name
  // asks for password
  strncpy(dbName,dbN,20);
  strncpy(userName,uN,20);
  char* password=getPassword();
  Bool_t rc=openConnection(password);
  if (!rc) close();
  return rc;
}


void HOraConn::close() {
  // disconnects from ORACLE
  // A transaction will be automatically rolled back,
  // that means changes in the database are not stored
  // without an explicit COMMIT
  actRunId=-1;
  runStart=-1;
  expLocation[0]='\0';
  historyDate[0]='\0';
  EXEC SQL WHENEVER SQLERROR DO
    showSqlError("close()");
  if (isConnected) {
    EXEC SQL ROLLBACK RELEASE;
    isConnected=kFALSE;
    cout<<"connection to Oracle closed"<<endl;
  }
}


void HOraConn::print() {
  // prints information about the database connection
  if (isConnected)
    cout<<"Oracle-Database: "<<dbName<<"    Username: "<<userName<<'\n';
  else cout<<"*** no connection to Oracle established  ***\n";
  if (strlen(historyDate)==0) cout<<"No history date set\n";
  else cout<<"History date: "<<historyDate<<'\n';
}


void HOraConn::showSqlError(const char* fctName,const char* msg) {
  // shows SQL error messages
  if (msg)
    Error(fctName,"\n%s\n%s\n",sqlca.sqlerrm.sqlerrmc,msg);
  else Error(fctName,"\n%s\n",sqlca.sqlerrm.sqlerrmc);
}


char* HOraConn::getPassword() {
  // asks for the password
  char* passwd = new char[20];
  char buf[20];
  int ttyfd = 0;
  struct termios tio, itio;
  if ((ttyfd = ::open("/dev/tty", O_RDWR)) < 0) {
    fprintf(stderr, "cannot open tty, using stdin\n");
    ttyfd = 0;
  }
  if (tcgetattr(ttyfd, &tio) < 0) {
    fprintf (stderr, "\nUnable to get terminal characteristics: ");
    cout<<"enter password for user "<<userName<<" > ";
    scanf("%[^\n]%*c",passwd);
    return passwd; 
  }
  itio = tio;
  tio.c_lflag &= ~(ECHO|ICANON);         
  tcsetattr (ttyfd, TCSAFLUSH, &tio);
  cout<<"enter password for user "<<userName<<" > ";
  fgets(buf, 20, stdin);
  tcsetattr (ttyfd, TCSAFLUSH, &itio);
  //close(ttyfd);
  sscanf(buf, "%s", passwd);
  cout<<endl;
  return passwd;
}


Bool_t HOraConn::openConnection(char* password) {
  // opens connection (contains the SQL-statements)
  if (isConnected) close();
  char connId[80];
  strcpy(connId,userName);
  strcat(connId,"@");
  strcat(connId,dbName);    // e.g."hades_ana@hadp"
  EXEC SQL BEGIN DECLARE SECTION;
    char* uName;
    char* pWord;
  EXEC SQL END DECLARE SECTION;
  uName=connId;
  pWord=password;
  EXEC SQL WHENEVER SQLERROR DO
    showSqlError("openConnection(char*)","Wrong user/password");
  EXEC SQL CONNECT :uName IDENTIFIED BY :pWord;
  if (sqlca.sqlcode==0) isConnected=kTRUE;
  else cout<<"*** Failed to connect to Oracle ***"<<endl;
  delete password;
  actRunId=-1;
  runStart=0;
  expLocation[0]='\0';
  historyDate[0]='\0';
  alignmentOutVers=-1;
  return isConnected; 
}


Int_t HOraConn::getRunStart(Int_t id) {
  // Gets the actual run id from the current event file and compares it with
  // the last used actRunId for fetching data.
  // If they are different, the run start time (converted to ansi C time) is
  // read from Oracle and stored together with the run id in the data members
  // run_id and runStart
  if (id==actRunId && runStart!=0) return runStart;
  if (strlen(historyDate)==0) setParamRelease(id);
  actRunId=id;
  alignmentOutVers=-1;
  runStart=-1;
  EXEC SQL BEGIN DECLARE SECTION;
    int ri; 
    int rs;
    varchar exp_loc[11];
  EXEC SQL END DECLARE SECTION;
  EXEC SQL WHENEVER SQLERROR GOTO notfound;
  ri = actRunId;
  exp_loc.len=11;
  EXEC SQL EXECUTE
    BEGIN
      hades_oper.run_query.get_run_start(:ri,:rs,:exp_loc);
    END;
  END-EXEC;
  if (ri==(int)actRunId) {
    runStart=rs;
    exp_loc.arr[exp_loc.len]='\0';
    if (strlen(expLocation)==0) strcpy(expLocation,(char*)exp_loc.arr);
    else {
      if (strcmp(expLocation,(char*)exp_loc.arr)!=0) {
        Error("getRunStart(Int_t)",
          "\nA switch from beamtime runs to simulations runs and vice versa is not "
          "possible\nwithout the close and reopen of the Oracle connection!\n\n");
        runStart=-1;
      }
    }
    /* cout<<"actRunId: "<<actRunId<<"   runStart: "<<runStart
           <<"   expLocation: "<<expLocation<<endl; */
    return runStart;
  }
notfound:
  Error("getRunStart(Int_t)","Run not found!\n\n");
  return -1; 
}


Bool_t HOraConn::setHistoryDate(const char* dateString) {
  // Sets the date to retrieve historic data
  // Returns kFALSE when the date string cannot be converted to a valid date.
  EXEC SQL BEGIN DECLARE SECTION;
    char* d;
    char rd[21];
  EXEC SQL END DECLARE SECTION;
  EXEC SQL WHENEVER SQLERROR GOTO notfound;
  d=(char*)dateString;
  EXEC SQL EXECUTE
    BEGIN
      hades_oper.run_query.set_history_date(:d);
      :rd := to_char(hades_oper.run_query.get_history_date,'DD-MON-YYYY HH24:MI:SS');
    END;
  END-EXEC;
  rd[20]='\0';
  strcpy(historyDate,rd);
  cout<<"*************************************************************\n";
  cout<<"     Oracle history date: "<<historyDate<<"\n";
  cout<<"*************************************************************\n";
  return kTRUE;
notfound:
  showSqlError("setHistoryDate(Int_t)");
  return kFALSE;
}

Bool_t HOraConn::setParamRelease(const char* release_name) {
  // Sets the history date to the creation date of the parameter release give by name
  EXEC SQL BEGIN DECLARE SECTION;
    char* r;
    char rd[21];
  EXEC SQL END DECLARE SECTION;
  EXEC SQL WHENEVER SQLERROR GOTO notfound;
  rd[0]='\0';	
  r=(char*)release_name;
  EXEC SQL EXECUTE
    BEGIN
      hades_oper.run_query.set_param_release(:r);
      :rd := to_char(hades_oper.run_query.get_history_date,'DD-MON-YYYY HH24:MI:SS');
    END;
  END-EXEC;
  rd[20]='\0';
  strcpy(historyDate,rd);
  cout<<"*************************************************************\n";
  cout<<"     Oracle history date: "<<historyDate<<"\n";
  cout<<"*************************************************************\n";
  return kTRUE;
notfound:
  showSqlError("setParamRelease(const char*)");
  return kFALSE;
}

Bool_t HOraConn::setParamRelease(Int_t run) {
  // Sets the history date to the creation date of the parameter release
  // for the corresponding experiment
  EXEC SQL BEGIN DECLARE SECTION;
    int r;
    char rd[21];
  EXEC SQL END DECLARE SECTION;
  EXEC SQL WHENEVER SQLERROR GOTO notfound;
  r=run;
  rd[0]='\0';
  EXEC SQL EXECUTE
    BEGIN
      hades_oper.run_query.set_history_date_by_run(:r);	
      :rd := to_char(hades_oper.run_query.get_history_date,'DD-MON-YYYY HH24:MI:SS');
    END;
  END-EXEC;
  rd[20]='\0';
  strcpy(historyDate,rd);
  cout<<"*************************************************************\n";
  cout<<"     Oracle history date: "<<historyDate<<"\n";
  cout<<"*************************************************************\n";
  return kTRUE;
notfound:
  showSqlError("setParamRelease(Int_t)");
  return kFALSE;
}
