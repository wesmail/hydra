//*-- AUTHOR : Ilse Koenig
//*-- Created : 16/09/2002 by Ilse Koenig
//*-- Modified: 04/02/2003 by Ilse Koenig

//_HADES_CLASS_DESCRIPTION 
//////////////////////////////////////////////////////////////////////////////
//
// HOraSimEventFileStorage
//
// Class to store event files for HGEANT in Oracle
//
//////////////////////////////////////////////////////////////////////////////

using namespace std;
#include "horasimeventfilestorage.h"
#include "horasimeventfile.h"
#include "horasimeventfileconfig.h"
#include "horasimutil.h"
#include <iostream>
#include <iomanip>
#include <fstream>

#define SQLCA_STORAGE_CLASS extern
#define ORACA_STORAGE_CLASS extern

// Oracle communication area
#include <oraca.h>
// Include the SQL Communications Area
#include <sqlca.h>

ClassImp(HOraSimEventFileStorage)

#define NMAX_CONFFILES 1000

HOraSimEventFileStorage::HOraSimEventFileStorage(HOraSimUtil* p) {
  pUtil=p;
  config=new HOraSimEventFileConfig;
  eventFiles=new TList;
}

HOraSimEventFileStorage::~HOraSimEventFileStorage() {
  if (config) {
    delete config;
    config=0;
  }
  if (eventFiles) {
    eventFiles->Delete();
    delete eventFiles;
    eventFiles=0;
  }
}

Bool_t HOraSimEventFileStorage::readFromFile(const char* filename) {
  TString configFile;
  Bool_t rc=kTRUE;
  fstream* fin=new fstream;
  fin->open(filename,ios::in);
  if (fin && (fin->rdbuf()->is_open()==1)) {
    const Int_t maxbuf=1024;
    Text_t buf[maxbuf];
    TString s, pName, pVal;
    while (!fin->eof() && rc) {
      fin->getline(buf,maxbuf);
      s=buf;
      s=s.ReplaceAll("\t"," ");
      s=s.Strip(s.kBoth);
      if (s.Length()>0 && !s.BeginsWith("//")) {
        Ssiz_t n=s.First(':');
        if (n==-1) {
          Error("readFromFile",
                "Missing backslash for keyword %s",pName.Data());
          rc=kFALSE;
          break;
        }
        Ssiz_t m=s.Last('\\');
        pName=s(0,n);
        pName.ToLower();
        if (m>0) s=s(n+1,m-n-1);
        else s=s(n+1,s.Length()-n-1);
        if (pName.CompareTo("event files")==0) {
          if (s.Length()>0) addNewEvtFile(s);
          while (!fin->eof()) {
            fin->getline(buf,maxbuf);
            s=buf;
            s=s.ReplaceAll("\t"," ");
            s=s.Strip(s.kBoth);
            if (s.Length()>0) addNewEvtFile(s);
          }      
        } else {
          s=s.Strip(s.kLeading);
          pVal=s;
          if (m>0) pVal+="\n";
          while (m>0 && !fin->eof()) {
            fin->getline(buf,maxbuf);
            s=buf;
            s=s.ReplaceAll("\t"," ");
            s=s.Strip(s.kBoth);
            if (s.Length()>0 && s[0]!='/') {
              m=s.Last('\\');
              if (m>0) {
                pVal+=s(0,m);
                pVal+="\n";
              }
              else pVal+=s;
            }
          }
          if (pName.CompareTo("event system")==0) config->decodeSystem(pVal.Data());
          if (pName.CompareTo("package name")==0) config->setPackageName(pVal.Data());
          if (pName.CompareTo("package version")==0) config->setPackageVersion(pVal.Data());
          if (pName.CompareTo("compiler")==0) config->setCompiler(pVal.Data());
          if (pName.CompareTo("config file")==0) configFile=pVal;
          if (pName.CompareTo("file format")==0) config->setFileFormat(pVal.Data());
          if (pName.CompareTo("author")==0) config->setAuthor(pVal.Data());
          if (pName.CompareTo("description")==0) config->setDescription(pVal.Data());
        }
      }
    }
    fin->close();
  } else {
     Error("readFromFile(const char*)","No File open");
     rc=kFALSE;
  }
  delete fin;
  if (rc) config->readConfigInfo(configFile);
  return rc;
}

void HOraSimEventFileStorage::addNewEvtFile(TString& s) {
  char fName[128], fDir[128], fSize[30], nevents[30], created[50],creaTime[30];  
  sscanf(s.Data(),"%s%s%s%s%s%s",fName,fDir,created,creaTime,fSize,nevents);
  HOraSimEventFile* ef=new HOraSimEventFile;
  ef->setFileName(fName);
  ef->setFileDirectory(fDir);
  ef->setFileSize(fSize);
  strcat(created," ");
  strcat(created,creaTime);
  ef->setCreationDate(created);
  ef->setNEvents(nevents);
  eventFiles->Add(ef);
}

void HOraSimEventFileStorage::print() {
  config->print();
  TIter next(eventFiles);
  HOraSimEventFile* o;
  while ((o=(HOraSimEventFile*)next())!=0) {
    o->print();
  }
}

Int_t HOraSimEventFileStorage::storeConfig() {
  EXEC SQL BEGIN DECLARE SECTION;
    int id =-1;
    char* packName;
    char* packVers;
    char* comp;
    char* evtsys;
    float en;
    char* conf;
    char* fformat;
    char* auth;
    char* descript;
    short comp_ind;
    short descript_ind;
  EXEC SQL END DECLARE SECTION;
  packName=(char*)(config->getPackageName());
  if (strlen(packName)==0) {
    Error("storeConfig()",
          "Package name for event generator files not defined");
    return -1;
  }
  packVers=(char*)(config->getPackageVersion());
  if (strlen(packVers)==0) {
    Error("storeConfig()",
          "Package version for event generator files not defined");
    return -1;
  }
  comp=(char*)(config->getCompiler());
  if (strlen(comp)==0) comp_ind=-1;
  else comp_ind=0;
  evtsys=(char*)(config->getEventSystem());
  if (strlen(evtsys)==0) {
    Error("storeConfig()",
          "System of event generator files not defined");
    return -1;
  }
  en=config->getEnergy();
  if (en==-1) {
    Error("storeConfig()",
          "Energy of event generator files not defined");
    return -1;
  }
  conf=(char*)(config->getConfigInfo());
  if (strlen(conf)==0) {
    Error("storeConfig()",
          "Configuration of event generator files not defined");
    return -1;
  }
  fformat=(char*)(config->getFileFormat());
  auth=(char*)(config->getAuthor());
  if (strlen(auth)==0) {
    Error("storeConfig()",
          "author of event generator files not defined");
    return -1;
  }
  descript=(char*)(config->getDescription());
  if (strlen(descript)==0) descript_ind=-1;
  else descript_ind=0;
  EXEC SQL WHENEVER SQLERROR GOTO ErrorFound;
  EXEC SQL WHENEVER NOT FOUND GOTO ErrorFound;
  EXEC SQL EXECUTE
    DECLARE
    BEGIN
      :id := hanal.simul_run_query.next_sim_sequ_id;
      IF :id > 0 THEN  
        INSERT INTO hanal.simul_event_file_config
            (config_id,package_name,package_version,compiler,event_system,
             energy,config_info,file_format,author,description)
          VALUES(:id,:packName,:packVers,:comp:comp_ind,:evtsys,
                 :en,:conf,:fformat,:auth,:descript:descript_ind);
      END IF;
    END;
  END-EXEC;
  return id;  
ErrorFound:
  pUtil->showSqlError("HOraSimEventFileStorage::storeConfig()");
  pUtil->rollback();
  return id;  
}

Bool_t HOraSimEventFileStorage::store() {
  if (!pUtil->isOpen()) {
    Error("HOraSimEventFileStorage::store()","No connection to Oracle!");
    return kFALSE;
  }
  Int_t configId=storeConfig();
  if (configId<=0) return kFALSE;
  EXEC SQL BEGIN DECLARE SECTION;
    int confid[NMAX_CONFFILES];
    char fname[NMAX_CONFFILES][127];
    char fdir[NMAX_CONFFILES][255];
    char ftime[NMAX_CONFFILES][50];
    int fsize[NMAX_CONFFILES];    
    int nevt[NMAX_CONFFILES];
    short fsize_ind[NMAX_CONFFILES];
    short nevt_ind[NMAX_CONFFILES];
    int rows_to_insert;
  EXEC SQL END DECLARE SECTION;
  Int_t n=0;
  TIter next(eventFiles);
  HOraSimEventFile* o;
  while ((o=(HOraSimEventFile*)next())!=0) {
    strncpy(fname[n],o->getFileName(),127);
    strncpy(fdir[n],o->getFileDirectory(),255);
    strncpy(ftime[n],o->getCreationDate(),50);
    fsize[n]=o->getFileSize();
    if (fsize[n]>=0) fsize_ind[n]=0;
    else fsize_ind[n]=-1;
    nevt[n]=o->getNEvents();
    if (nevt[n]>=0) nevt_ind[n]=0;
    else nevt_ind[n]=-1;
    confid[n]=configId;
    n++;
  }
  EXEC SQL WHENEVER SQLERROR GOTO ErrorFound;
  EXEC SQL WHENEVER NOT FOUND GOTO ErrorFound;
  rows_to_insert=n;
  EXEC SQL FOR :rows_to_insert
    INSERT INTO hanal.simul_event_file
        (file_name,file_location,created,file_size,events,config_id) 
      VALUES (:fname,:fdir,TO_DATE(:ftime,'DD-MON-YYYY HH24:MI:SS'),
        :fsize:fsize_ind,:nevt:nevt_ind,:confid);      
  cout<<"****************************************************************\n";
  cout<<"***  "<<n<<" event generator files written to Oracle"<<endl;
  pUtil->commit();
  cout<<"****************************************************************\n";
  return kTRUE;  
ErrorFound:
  pUtil->showSqlError("HOraSimEventFileStorage::store()");
  pUtil->rollback();
  return kFALSE;  
}
