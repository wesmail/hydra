/* Generated by Together */

#ifndef TGO4ANALYSISCLIENT_H
#define TGO4ANALYSISCLIENT_H
#include "Go4CommandsBase/Go4CommandsBase.h"
#include "Go4TaskHandler/TGo4ClientTask.h"
#include "TGo4Hades.h"
#include "Go4AnalysisClient/TGo4AnalysisClient.h"
#include "TGo4HadesMainRunnable.h"
#include "TGo4HadesWatchRunnable.h"


class TBuffer;
class TGo4Command;
class TGo4ObjectQueue;
class TGo4BufferQueue;
class TNamed;

class TGo4ClientStatus;


/**
 * @author J. Adamczewski
 * @since 12/2000 
 */
class TGo4HadesClient : public TGo4ClientTask{
public:   

   TGo4HadesClient(Text_t* name,TGo4Hades* analysis, Text_t* host="localhost", UInt_t negport=0);
   virtual ~TGo4HadesClient(); 
   TGo4Hades * GetAnalysis()
                           {
                              return TGo4Hades::Instance();  
                           }

   virtual void Start();

   virtual void Stop();

   /**
    * Kill the main thread; method to be called from
    * command, should be overridden in user
    * implementation 
    */
   virtual void KillMain();

   /**
    * Restart the main thread; method to be called from
    * command, should be overridden in user
    * implementation
    */
   virtual void RestartMain();

   /**
    * Restore the internal client state from given status
    * object. Overridden from superclass
    */
   virtual void RestoreStatus(TGo4ClientStatus * stat);    

   /**
           * create a status object with information on the
           * current client state. this object may be sent to the
           * server or may be used to restore current status by
           * memento mechanism. Overridden from superclass
           */
   virtual TGo4ClientStatus * CreateStatus();      

   /**
          * Override the ClientTask/ThreadManager  Initialization used by AppControlTimer
          * to init event classes before the threads are started.
          */
   virtual Int_t Initialization();      

   /**
    * Fetch object of name from analysis instance and put
    * it into the data queue of the client. Send an error status
    * object via status queue if there is no such object. 
    */
   void SendObject(const Text_t* name);

   /**
    * Send object via data channel to the server.
    */
   void SendObject(TNamed* obj);

   /**
    * Send status object via status channel to the server.
    */
   void SendStatus(TGo4Status* stat);

   /**
    * Send message string in a status object to the gui.
    * Will be displayed in status window.
    */
   void SendStatusMessage(Text_t * text);

   /**
    * Send a complete status object of the analysis via
    * the status queue.
    */
   void SendAnalysisStatus();

   /**
    * Send the list of object names (folder structure) as status object
    * to the gui.
    */
   void SendNamesList();      

   /**
    * Create status object and stream it into the
    * status send buffer. To be executed from 
    * the main thread; buffer will be send by
    * status thread. 
    */
   void UpdateStatusBuffer();

protected:

   /**
    * method needed by method
    * CreateStatus of any status subclasses to
    * set the values of the clienttask specific
    * part of the status object. 
    */
   virtual void UpdateStatus(TGo4ClientStatus* state);

public:

   /**
       * suffix for main thread name
       */
   static const Text_t fgcMAINTHREAD[]; //!   

   /**
       * suffix for watch thread name
       */
   static const Text_t fgcWATCHTHREAD[]; //!

private:   

   /** The analysis the client is working on.
    * @link aggregationByValue
    * @supplierCardinality 1
    * @clientCardinality 0..1*/
    TGo4Hades * fxAnalysis; //!

   /**
    * remember name of main thread
    */
   Text_t* fcMainName; //!

   /**
     * remember name of watch thread
     */
   Text_t* fcWatchName; //!
      

   /**
    * Buffer containing the analysis status which is
    * updated by the main thread 
    */
   TBuffer* fxStatusBuffer;

   TGo4HadesClient();
   
ClassDef(TGo4HadesClient,1)   
};
#endif //TGO4ANALYSISCLIENT_H
