/* Generated by Together */

#ifndef TGO4ANALYSISWATCHRUNNABLE_H
#define TGO4ANALYSISWATCHRUNNABLE_H
#include "Go4ThreadManager/TGo4Runnable.h"
#include "Go4Socket/TGo4Socket.h"
#include "hades.h"


class TGo4Hades;
class TGo4HadesClient;

#ifndef __MAKECINT__
   #include "Go4Queue/TGo4ThreadQueue.h"
class TGo4BufferQueue;
#else
   class TGo4ThreadQueue<TGo4Status>;
#endif



/**
 * runnable performing control watcher functions of analysis client task:
 * status of analysis is send to status queue
 * @stereotype thread
 * @author J. Adamczewski
 * @since 11-Jan-2001
 */
class TGo4HadesWatchRunnable : public TGo4Runnable {
public:



    TGo4HadesWatchRunnable(Text_t* name, TGo4HadesClient* cli);

    virtual ~TGo4HadesWatchRunnable();    

    virtual Int_t Run(void*);

/**
 * frequency in ms for the watcher runnable to check the application
 */
   static const UInt_t fguWATCHINTERVAL;//!

private:    
//!

    /** @supplierCardinality 1 
     * @directed
     * @clientCardinality 0..1*/
    TGo4Hades * fxAnalysis;//!

    TGo4HadesWatchRunnable();

ClassDef(TGo4HadesWatchRunnable,1)       
};
#endif //TGO4ANALYSISWATCHRUNNABLE_H
