/* Generated by Together */

#include "TGo4HadesMainRunnable.h"
#include "Go4HadesClient/TGo4HadesClient.h"

TGo4HadesMainRunnable::TGo4HadesMainRunnable(Text_t* name, TGo4HadesClient* cli)
: TGo4Runnable(name,cli)
{
   TRACE((15,"TGo4HadesMainRunnable::TGo4HadesMainRunnable(Text_t*, TGo4HadesClient*)",__LINE__, __FILE__));
   fxAnalysis=cli->GetAnalysis();
}

TGo4HadesMainRunnable::~TGo4HadesMainRunnable()
{
TRACE((15,"TGo4HadesMainRunnable::~TGo4HadesMainRunnable()",__LINE__, __FILE__));


}

Int_t TGo4HadesMainRunnable::PostRun(void * )
{
   TRACE((12,"TGo4HadesMainRunnable::PostRun()",__LINE__, __FILE__));
   //cout << "test of main runnable postrun "<< endl;
   fxAnalysis->PostLoop();  
   return 0;
}
Int_t TGo4HadesMainRunnable::PreRun(void * )
{
   TRACE((12,"TGo4HadesMainRunnable::PreRun()",__LINE__, __FILE__));
   //cout << "test of main runnable prerun "<< endl;
   fxAnalysis->PreLoop();
   return 0; 
}
Int_t TGo4HadesMainRunnable::Run(void*)
{
   TRACE((12,"TGo4HadesMainRunnable::Run()",__LINE__, __FILE__));
   //TGo4TraceSingleton* tr=TGo4TraceSingleton::Instance();
   Int_t rev=0;
   TGo4HadesClient* cli = dynamic_cast<TGo4HadesClient*> (fxManager);
   TGo4Command* com=cli->NextCommand();
   //cout << "main runnable after next command"<< endl;
   if(com)
     {
//        cout << "main runnable before invoker lock"<< endl;
         TGo4LockGuard mainlock; // protect command invocation!
               TGo4CommandInvoker::Instance()->Invoke(com); // execute command by invoker
               delete com;
     }
   else  // if(com)
     {
        // zero object means proceed with analysis...
      //cout << "main runnable before cycle lock"<< endl;  
      TGo4LockGuard mainguard; // global lock main actions
        //cout << "main runnable before calling cycle "<< endl;
        rev=fxAnalysis->MainCycle();
        //cout << "main runnable returned from cycle "<< endl;
        cli->UpdateStatusBuffer();
        if(rev!=0)
            {
               // check for error codes (later we use exceptions!)
               if(rev==-42)
                  {
                     // stop on error is active
                     // stop runnable
                     //GetThread()->Stop(); // later: dont stop runnable, but analysis only
                     cli->Stop();
                     // send status object to server 
                     TGo4Status* stat= new TGo4Status("G-OOOO-> AnalysisMainRunnable STOPPED on ERROR <-OOOO-G");   
                     cli->SendStatus(stat);
                     
                       
                  }   
               else
                  {
                     // no stop on error, continue loop
                  }                              
            } // if (rev!=0)
      }  // if(com)
   return rev;
}


ClassImp(TGo4HadesMainRunnable)
