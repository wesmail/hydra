//*-- AUTHOR : Ilse Koenig
//*-- Created : 20/11/2002 by I.Koenig
//*-- Modified : 19/10/2005 by I.Koenig

//_HADES_CLASS_DESCRIPTION 
//////////////////////////////////////////////////////////////////////////////
// HCondParOraIo
//
// Interface class to database Oracle for input/output of parameters derived
// from HParCond
//
//////////////////////////////////////////////////////////////////////////////

#include "hcondparoraio.h"
#include "hparcond.h"
#include "hparamlist.h"

#define SQLCA_STORAGE_CLASS extern
#define ORACA_STORAGE_CLASS extern

// Oracle communication area
#include <oraca.h>
// Include the SQL Communications Area
#include <sqlca.h>

ClassImp(HCondParOraIo)

#define NMAX_PARAM 200
#define LOB_BUFSIZE 32512

HCondParOraIo::HCondParOraIo(HOraConn* pC) : HDetParOraIo(pC) {
  // constructor
  // sets the name of the I/O class "HCondParIo"
  // gets the pointer to the connection class
  fName="HCondParIo";
}

Bool_t HCondParOraIo::init(HParSet* pPar,Int_t* set) {
  // calls HDetParOraIo"::readCond(HParCond*,Int_t*)
  if (pPar->InheritsFrom("HParCond")) return readCond((HParCond*)pPar,set);
  Error("HCondParOraIo::init(HParSet*,Int_t*)",
        "%s does not inherit from HParCond",pPar->GetName());
  return kFALSE;
}

Int_t HCondParOraIo::write(HParSet* pPar) {
  // calls HDetParOraIo"::writeCond(HParCond*)
  Int_t runStart=getRunStart(pPar);
  if (runStart<=0) return -1;
  if (pPar->InheritsFrom("HParCond")) return writeCond((HParCond*)pPar);
  Error("HCondParOraIo::write(HParSet*)",
        "%s does not inherit from HParCond",pPar->GetName());
  return -1;
}

Bool_t HCondParOraIo::readFromLoadingTable(HParCond* pPar,Int_t version) {
  // reads the analysis parameters from the LOAD table and fills the container
  EXEC SQL BEGIN DECLARE SECTION;
    int vers;
    struct {
      varchar p_name[NMAX_PARAM][81];
      varchar p_value[NMAX_PARAM][4001];
      int     p_num[NMAX_PARAM];
      varchar p_type[NMAX_PARAM][81];
      int     p_is_binary[NMAX_PARAM];
      int     p_is_basic[NMAX_PARAM];
      int     p_class_vers[NMAX_PARAM];
      int     p_streamer[NMAX_PARAM];
    } cl;
    struct {
      short p_name_Ind[NMAX_PARAM];
      short p_value_Ind[NMAX_PARAM];
      short p_num_Ind[NMAX_PARAM];
      short p_type_Ind[NMAX_PARAM];
      short p_is_binary_Ind[NMAX_PARAM];
      short p_is_basic_Ind[NMAX_PARAM];
      short p_class_vers_Ind[NMAX_PARAM];
      short p_streamer_Ind[NMAX_PARAM];
    } cl_Ind;
  EXEC SQL END DECLARE SECTION;
  EXEC SQL WHENEVER SQLERROR DO showSqlError("readFromLoadingTable(HParCond*,Int_t*)");
  EXEC SQL WHENEVER NOT FOUND CONTINUE;
  vers=version;
  EXEC SQL SELECT param_name, param_value, nvalues, param_value_type,
                  is_binary, is_basic_type, class_version, streamerinfo_id
           INTO :cl INDICATOR :cl_Ind
           FROM hanal.param_value_load_all
           WHERE param_vers_load_id = :vers;
  HParamList* paramList = new HParamList;
  TList* blobList=new TList;
  if (sqlca.sqlerrd[2]==0) {
    Error("readFromLoadingTable","Version %i not found",version);
    return kFALSE;
  }
  for(Int_t i=0;i<sqlca.sqlerrd[2];i++) {
    if (cl_Ind.p_name_Ind[i]!=-1 && cl_Ind.p_value_Ind[i]!=-1) {
      cl.p_name[i].arr[cl.p_name[i].len]='\0';
      cl.p_value[i].arr[cl.p_value[i].len]='\0';
      cl.p_type[i].arr[cl.p_type[i].len]='\0';
      if (cl.p_is_binary[i]==0)
        paramList->add((char*)(cl.p_name[i].arr),(char*)(cl.p_value[i].arr),
                       cl.p_type[i].arr[0],cl.p_num[i]);
      else {
        HParamBinObj* o=new HParamBinObj;
        o->SetName((char*)(cl.p_name[i].arr));
        o->setParamType((char*)(cl.p_type[i].arr));
        if (cl.p_is_basic[i]==0) o->setClassVersion(cl.p_class_vers[i]);
        paramList->getBinaryList()->Add(o);
        Int_t lobId;
        sscanf((char*)(cl.p_value[i].arr),"%i",&lobId);
        HParOraBlob* ob=new HParOraBlob(o,lobId);
        if (cl_Ind.p_streamer_Ind[i]!=-1) ob->blobStreamerId=cl.p_streamer[i];
        blobList->Add(ob);
      }
    }
  }
  TIter next(blobList);
  HParOraBlob* b;
  Bool_t rc=kTRUE;
  while ((b=(HParOraBlob*)next())!=0 && rc) {
    rc=readLoadBlob(b->binaryParam,b->blobId,kFALSE);
    if (rc&&b->blobStreamerId>0) rc=readLoadBlob(b->binaryParam,b->blobStreamerId,kTRUE);
  }
  if (rc && sqlca.sqlerrd[2]>0) {
    rc=pPar->getParams(paramList);
    pPar->setInputVersion(version,inputNumber);
  } else pPar->setInputVersion(-1,inputNumber);
  blobList->Delete();
  delete blobList;
  delete paramList;
  if (rc==kTRUE) {
    setChanged(pPar);
    cout<<pPar->GetName()<<" initialized from Load Table"<<'\n';
  }
  return rc;
}

Bool_t HCondParOraIo::readLoadBlob(HParamBinObj* obj,Int_t lobId,Bool_t isStreamerInfo) {
  // reads the BLOB from the LOAD table
  EXEC SQL BEGIN DECLARE SECTION;
    int            id;
    unsigned int   loblength;
    unsigned int   amount;
    unsigned int   offset;
    unsigned char  buffer[LOB_BUFSIZE];
    EXEC SQL VAR buffer IS RAW(LOB_BUFSIZE);
  EXEC SQL END DECLARE SECTION;
  id=lobId;
  amount=LOB_BUFSIZE;
  UChar_t* pBlob=0;
  UInt_t amountRead=0;
  EXEC SQL WHENEVER SQLERROR GOTO notfound;
  EXEC SQL WHENEVER NOT FOUND GOTO notfound;
  if (isStreamerInfo) {
    EXEC SQL EXECUTE
      BEGIN
        hanal.hap_param_lob_access.read_load_streamerinfo(:id,:amount,:loblength,:buffer);
      END;
    END-EXEC;
    obj->setStreamerInfoSize(loblength);
    pBlob=obj->getStreamerInfo();
  } else {
    EXEC SQL EXECUTE
      BEGIN
        hanal.hap_param_lob_access.read_load_blob(:id,:amount,:loblength,:buffer);
      END;
    END-EXEC;
    obj->setLength(loblength);
    pBlob=obj->getParamValue();
  }
  amountRead=amount;
  memcpy((unsigned char*)pBlob,buffer,amount);
  while (amountRead<loblength) {
    amount= (loblength>LOB_BUFSIZE) ? LOB_BUFSIZE : loblength ;
    offset=amountRead+1;
    EXEC SQL EXECUTE
      BEGIN
        hanal.hap_param_lob_access.read_next_buffer(:amount,:offset,:buffer);
      END;
    END-EXEC;
    memcpy((unsigned char*)(&pBlob[amountRead]),buffer,amount);
    amountRead+=amount;
  }
  return kTRUE;
notfound:
  showSqlError("readLoadBlob");
  Error("readLoadBlob","Blob %i not read",lobId);
  return kFALSE;
}
