            The HADES Acceptance Filter for Theorists  (HAFT)
            =================================================

The fiter consists of acceptance matrices, one per particle type, e.g.
e-, e+, pi-, pi+, protons, etc., and of smearing functions that model the
finite detector resolution.

The HADES acceptance matrices are produced and stored as ROOT TH3F objects,
i.e. 3-dimensional histograms Acc(p,theta,phi).  However, as most theorists
prefer (!) to code their transport theories in FORTRAN, the easiest way to
provide the filter to them is to code it in ANSI FORTRAN 77 as well.  This
means, among other things, that it is best to transform the acceptance matrices
into a FORTRAN-readable format: ascii or binary.  I opted for the more compact,
loss-less and temper-proof binary format.

The 3d table is interpolated using different methods accoding to mode:

mode = 0 : nearest neighbour
     = 1 : tri-linear interpolation (this gives some averaging over 8 voxels)
     = 2 : tri-quadratic interpolation
     = 3 : tri-cubic interpolation (better for fine structures, but can induce
           spurious oscillations due to curvature over/undershoot)

     + more modes.


- The Root C++ macro writeHAFT.C is used to do the conversion and writing of
  TH3F objects in FORTRAN-readable format to file HadesAcceptanceFilter.acc.

  Eventually the mass unit is converted from MeV/c**2 to GeV/c**2.

  writeHAFT can be called several times in a row to write more than one matrix
  to the same file.  All matrices MUST have unique pid and MUST have the same
  dimensions.


- The FORTRAN code readHAFT.f is used to open, read and interpolate the
  acceptance matrices for various particle types.  The matrices are opened
  in direct unformatted access mode as linear arrays.  The 3 actual matrix 
  dimensions are read from file first and used to determine the appropriate
  number of bins to be read.   The maximum number of bins, i.e. the maximal matrix
  size is hard-coded in readHAFT.inc and MUST be adapted if too small
  (default=150000, enough for e.g. 100x45x30 bins).

  readHAFT also provides support for applying the Hades resolution to a given
  particle via a call to smearHadesMomentum(mom,mode,pid) where mode = 1, 2 or 3
  for low resolution, medium resolution or high resolution, respectively.
  This function needs the random number generator ran returning uniform random
  numbers between 0 and 1.  One possible implementation is given in file ran.f.

- libHAFT.so can be loaded into Root to make the following FORTRAN calls available:

    void setfilename_(char *name. int strlen);
    int readhaftmatrix_();
    float gethadesacceptance_(int *id, float *p, float *th, float *ph, int *mode);
    float getmatrixval_(int *ix,int *iy, int *iz, int *id);
    void getlimits_(float *plo, float *phi, float *dp, float *thlo, float *thhi,
                    float *dth,float *phlo, float *phhi, float *dph,);
    void get dimensions_(int *xdim, int *dim, int *zdim);
    void smearhades4momentum_(Float_t *mom, Int_t *mode, Int_t *pid);

  Don't forget that function arguments are to be passed by address for FORTRAN,
  that function names are all lower-case and that calls must be appended with
  a "_"!


- To link an executable usercode (Fortran, C or C++) with libHAFT.so use e.g.
    g77 usercode.o libHAFT.so -Wl,-rpath,/misc/halo/anal/dev/haft -o usercode



HAFT v1.2        27/07/05  R. Holzmann

